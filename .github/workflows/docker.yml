name: Build Docker image

permissions:
  contents: write

on:
  schedule:
    - cron: '6 0 * * *'  # Every day at 00:01
  workflow_dispatch:  # Allow manual trigger

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'  # Prevent the workflow from triggering itself

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check version
        env:
          BUILDANDPUSH: no
        run: |
          # Retry up to 10 times to get LATEST_VERSION
          for i in $(seq 1 10); do
            LATEST_VERSION=$(curl -s https://api.github.com/repos/microsoft/vscode/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
            echo "Latest version: ${LATEST_VERSION}"
            if [ -n "$LATEST_VERSION" ]; then
              break
            fi
            echo "Attempt $i failed, retrying in 3s..."
            sleep 3
          done
          if [ -z "$LATEST_VERSION" ]; then
            echo "Failed to fetch LATEST_VERSION after 3 attempts." >&2
            exit 1
          fi
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV

          MAJOR_VERSION=$(echo ${LATEST_VERSION} | awk -F. '{print $1 "." $2}')
          echo "MAJOR_VERSION=${MAJOR_VERSION}" >> $GITHUB_ENV
          echo "Major version: ${MAJOR_VERSION}"

          VERSION=$(echo ${MAJOR_VERSION} | cut -c 1) >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Version: ${VERSION}"

          LAST_VERSION_FILE="version_vscode.txt"
          if [ -f "${LAST_VERSION_FILE}" ]; then
            LAST_VERSION=$(cat "${LAST_VERSION_FILE}")
          else
            LAST_VERSION="none"
          fi
          echo "Last version: ${LAST_VERSION}"

          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

          # Compare versions and decide if we should build and push
          if [ "$LATEST_VERSION" != "$LAST_VERSION" ]; then
            curl -o vscode-x64.tar.gz -fsSL https://update.code.visualstudio.com/latest/cli-linux-x64/stable
            curl -o vscode-arm64.tar.gz -fsSL https://update.code.visualstudio.com/latest/cli-linux-arm64/stable
            echo $LATEST_VERSION > $LAST_VERSION_FILE
            git add $LAST_VERSION_FILE
            git commit -m "New VSCode version"
            echo "BUILDANDPUSH=true" >> $GITHUB_ENV
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        if: ${{ env.BUILDANDPUSH == 'true' }}
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3
        if: ${{ env.BUILDANDPUSH == 'true' }}
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: ${{ env.BUILDANDPUSH == 'true' }}

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v6
        if: ${{ env.BUILDANDPUSH == 'true' }}
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/vscode-tunnel:latest
            ${{ vars.DOCKERHUB_USERNAME }}/vscode-tunnel:${{ env.VERSION }}
            ${{ vars.DOCKERHUB_USERNAME }}/vscode-tunnel:${{ env.MAJOR_VERSION }}
            ${{ vars.DOCKERHUB_USERNAME }}/vscode-tunnel:${{ env.LATEST_VERSION }}
          platforms: linux/amd64,linux/arm64

      - name: Update version on file
        if: ${{ env.BUILDANDPUSH == 'true' }}
        run: |
          git push origin main